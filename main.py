import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
import buttons
import json
import machine_create
from Machine import Machine
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from machine_create import add_machine, remove_machine, address_list_to_dict
from cash_register import stats_send, stats_writer, all_data, pivot_table
from statistics_plot import *

data = dict
machine_index = 0

BOT_TOKEN = "token"
bot = Bot(BOT_TOKEN)
dp = Dispatcher()


class Address(StatesGroup):
    city = State()
    street = State()
    house = State()
    validate = State()


with open("data.json", 'r', encoding="utf-8-sig") as coffee_data:
    MENU = json.load(coffee_data)
beverage_list = [beverage for beverage in MENU]

print("–∑–∞–ø—É—Å–∫")


@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("‚òï")
    machine_create.first_start()
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚òï", reply_markup=buttons.main_kb)


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_root")
async def root(callback: CallbackQuery):
    await callback.message.answer("‚òï")
    await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚òï", reply_markup=buttons.main_kb)


@dp.callback_query(F.data == "check_id")
async def check_id(callback: CallbackQuery):
    await callback.message.answer(text=f"–í–∞—à ID:{callback.from_user.id}")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞-–≥–æ—Ä–æ–¥
@dp.callback_query(F.data == "add_machine")
async def add_machine_city(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Address.city)
    await callback.message.answer(text="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞-—É–ª–∏—Ü–∞
@dp.message(Address.city, F.text)
async def add_machine_street(message: Message, state: FSMContext):
    await state.update_data(city=message.text.title())
    await state.set_state(Address.street)
    await message.answer(text="–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞-–Ω–æ–º–µ—Ä –¥–æ–º–∞
@dp.message(Address.street, F.text)
async def add_machine_street(message: Message, state: FSMContext):
    await state.update_data(street=message.text.title())
    await state.set_state(Address.house)
    await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞-–≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ
@dp.message(Address.house, F.text)
async def add_machine_house(message: Message, state: FSMContext):
    global data
    data = await state.update_data(house=message.text)
    await state.set_state(Address.validate)
    text = f"–≥.{data['city']}, —É–ª.{data['street']}, ‚Ññ{data['house']}"
    await message.answer(text=f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {text}, –≤—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=buttons.yes_no_buttons)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
@dp.callback_query(Address.validate, F.data == "address_yes")
async def add_machine_confirm(callback: CallbackQuery, state: FSMContext):
    global data
    data = await state.get_data()
    await state.clear()
    symbol = "‚úîÔ∏è"
    add_machine(data)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ Machine_create, —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∞–¥—Ä–µ—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∞
    await callback.message.answer(text=f"–ê–≤—Ç–æ–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω {symbol}", reply_markup=buttons.automat_list())


# –û—Ç–∫–∞–∑ –æ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞,–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∑–∞–Ω–æ–≤–æ
@dp.callback_query(Address.validate, F.data == "address_no")
async def add_machine_confirm(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Address.city)
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=buttons.back_button_to_root)


# –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞
@dp.callback_query(F.data == "delete_machine")
async def delete_machine(callback: CallbackQuery):
    await callback.message.answer(text="–í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=buttons.yes_no_buttons_delete_machine)


@dp.callback_query(lambda call: call.data == "delete_yes" or call.data == "delete_no")
async def delete_machine(callback: CallbackQuery):
    if callback.data == "delete_yes":
        remove_machine(machine_index)
        await callback.message.answer(text="–ê–≤—Ç–æ–º–∞—Ç —É–¥–∞–ª—ë–Ω ‚ùå", reply_markup=buttons.automat_list())
    else:
        await callback.message.answer("üëç", reply_markup=buttons.machine_kb)


# –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
@dp.callback_query(F.data == "m_list")
async def machines_list(callback: CallbackQuery):
    await callback.message.answer(text="–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤ üóÉÔ∏è", reply_markup=buttons.automat_list())


# –û—Ç—á—ë—Ç –æ —Ä–µ—Å—É—Ä—Å–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
@dp.callback_query(F.data == "m_resources")
async def machine_resources(callback: CallbackQuery):
    global machine_index
    report = Machine(f"{machine_index}", MENU).report()
    await callback.message.answer(text=report, reply_markup=buttons.machine_kb)


@dp.callback_query(F.data == "refill_machine")
async def machine_resources(callback: CallbackQuery):
    global machine_index
    Machine(f"{machine_index}", MENU).load_resources()
    await callback.message.answer(text="–ê–≤—Ç–æ–º–∞—Ç –∑–∞–ø—Ä–∞–≤–ª–µ–Ω", reply_markup=buttons.machine_kb)


# "–ö–∞—Å—Å–∞"
@dp.callback_query(F.data == "m_money")
async def machine_resources(callback: CallbackQuery):
    global machine_index
    await callback.message.answer(text=f"{stats_send(machine_index)}", reply_markup=buttons.machine_kb)


@dp.callback_query(F.data == "coffee_list")
async def coffee_list(callback: CallbackQuery):
    await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫", reply_markup=buttons.coffee_list(machine_index))


@dp.callback_query(F.data == "m_stats")
async def machine_stats(callback: CallbackQuery):
    global machine_index
    await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=buttons.stats_kb(machine_index))


@dp.callback_query(F.data == "all_stats")
async def month_money_stats(callback: CallbackQuery):
    await callback.message.answer(text=all_data(), reply_markup=buttons.all_stats_kb)


@dp.callback_query(F.data == "send_pivot_table")
async def pivot_table_stats(callback: CallbackQuery):
    all_stats_graph()
    pivot_table()
    file_path = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.csv"
    send_document = FSInputFile(path=file_path)
    await bot.send_document(document=send_document, chat_id=callback.message.chat.id,
                            reply_markup=buttons.back_button_to_root)


@dp.callback_query(F.data == "sell_graph")
async def month_money_stats(callback: CallbackQuery):
    all_stats_graph()
    file_path = "all_stats_send.jpg"
    plot_file = FSInputFile(path=file_path)
    await bot.send_photo(photo=plot_file, chat_id=callback.message.chat.id, reply_markup=buttons.back_button_to_root)


@dp.callback_query(F.data == "money_stats_month")
async def month_money_stats(callback: CallbackQuery):
    profit_graph_send(machine_index, 31, "money_stats")
    file_path = "send_money_stats.jpg"
    plot_file = FSInputFile(path=file_path)
    await bot.send_photo(photo=plot_file, chat_id=callback.message.chat.id,
                         reply_markup=buttons.stats_kb(machine_index))


@dp.callback_query(F.data == 'money_stats_week')
async def week_money_stats(callback: CallbackQuery):
    profit_graph_send(machine_index, 7, "money_stats")
    file_path = "send_money_stats.jpg"
    plot_file = FSInputFile(path=file_path)
    await bot.send_photo(photo=plot_file, chat_id=callback.message.chat.id,
                         reply_markup=buttons.stats_kb(machine_index))


@dp.callback_query(F.data == 'customers_choice')
async def best_beverage(callback: CallbackQuery):
    check = profit_graph_send(machine_index, 7, "bev_stats")
    if check == False:
        await callback.message.answer(text="–ü–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ", reply_markup=buttons.machine_kb)
    else:
        file_path = "best_beverage_stat_send.jpg"
        plot_file = FSInputFile(path=file_path)
        await bot.send_photo(photo=plot_file, chat_id=callback.message.chat.id,
                             reply_markup=buttons.stats_kb(machine_index))


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑–∞–∑, –º–æ–Ω–∏—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è" –∫–æ—Ñ–µ
@dp.callback_query(lambda call: call.data in beverage_list)
async def buy_coffee(callback: CallbackQuery):
    user_beverage_choice = callback.data
    machine = Machine(machine_index, MENU)
    if machine.check_resources(user_beverage_choice):
        machine.coffee_maker(user_beverage_choice)
        stats_writer(user_beverage_choice, machine_index)
        await callback.message.answer(text="‚òï")
        await callback.message.answer(text=f"–í–æ—Ç –≤–∞—à {user_beverage_choice}‚òï", reply_markup=buttons.machine_kb)
    else:
        machine = Machine(machine_index, MENU)
        await bot.send_message(chat_id=callback.message.chat.id,
                               text=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç ‚ùó \n{machine.report()}",
                               reply_markup=buttons.machine_kb)


# –≠—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è. –õ–æ–≤–∏—Ç –∫–æ–ª–ª–±—ç–∫–∏ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
@dp.callback_query()
async def current_machine(callback: CallbackQuery):
    global machine_index  # –ò–Ω–¥–µ–∫—Å –º–∞—à–∏–Ω—ã —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ–º
    machine_index = callback.data  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    address_list = address_list_to_dict()
    current_address = address_list[machine_index]
    machine_index = int(callback.data)
    await callback.message.answer(text=f"{current_address} –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=buttons.machine_kb)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
