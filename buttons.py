from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from Machine import Machine
import json
from machine_create import address_list_to_dict


with open("data.json", 'r', encoding="utf-8-sig") as coffee_data:
    MENU = json.load(coffee_data)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–æ–≤", callback_data='m_list')],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç", callback_data="add_machine")],
        [InlineKeyboardButton(text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="all_stats")],
    ]

)

#–ö–Ω–æ–ø–∫–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
all_stats_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂", callback_data="sell_graph")],
        [InlineKeyboardButton(text="–í—ã—Å–ª–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É", callback_data="send_pivot_table")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_root")]
    ]
)


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞. –†–µ—Å—É—Ä—Å—ã, "–∫–∞—Å—Å–∞"
machine_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã", callback_data='m_resources'), InlineKeyboardButton(text="–ö–∞—Å—Å–∞", callback_data='m_money')],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='m_stats')],

        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç", callback_data='delete_machine')],
        [InlineKeyboardButton(text="–ó–∞–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç", callback_data='refill_machine')],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–æ—Ñ–µ", callback_data='coffee_list')],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='m_list')]

    ]
)

def stats_kb(machine_index):
    callback_for_machine = str(machine_index)
    stats_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è ‚ÇΩ –∑–∞ –º–µ—Å—è—Ü", callback_data='money_stats_month')],
            [InlineKeyboardButton(text="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è ‚ÇΩ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data='money_stats_week')],
            [InlineKeyboardButton(text="–°–∞–º—ã–π –ø–æ–∫—É–ø–∞–µ–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü", callback_data='customers_choice')],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=callback_for_machine)]
        ]
    )
    return stats_kb


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ñ–µ
def coffee_list(machine_index):
    callback_for_machine = str(machine_index)
    items = []
    with open("data.json", "r", encoding="utf-8-sig") as file:
        menu = json.load(file)
        for beverage in menu:
            items.append(beverage)
    builder = InlineKeyboardBuilder()
    [builder.button(text=item.title(), callback_data=item) for item in items]
    builder.button(text="–ù–∞–∑–∞–¥", callback_data=callback_for_machine)
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)


# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
def warning(item):
    machine = Machine(int(item), MENU).resource_monitor()
    if machine == "ok":
        return "üü¢"
    elif machine == "refill": #—É–±—Ä–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é check_resources –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ resource monitor
        return "üî¥"
    else:
        return "üü†"


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ —Å–ø–∏—Å–∫—É –∞–¥—Ä–µ—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–æ–≤
def automat_list():
    new_dict = address_list_to_dict() #–ß–µ—Ä–µ–∑ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –∫ —Å–ª–æ–≤–∞—Ä—é —Å–º. –≤ machine_create
    builder = InlineKeyboardBuilder()
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è,–≥–¥–µ –∫–æ–ª–ª–±—ç–∫ –∑–∞–¥–∞—ë—Ç—Å—è –ø–æ –∫–ª—é—á—É (–Ω–æ–º–µ—Ä—É)
    [builder.button(text=(item + ": " + new_dict[item] + f"   {warning(item)}"), callback_data=item) for item in
     new_dict]  # –ó–∞–¥–∞—ë–º "–∫–æ–ª–ª-–±—ç–∫" –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ –∫–ª—é—á–∞–º —Å–ª–æ–≤–∞—Ä—è
    builder.button(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_root")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)


# –ö–Ω–æ–ø–∫–∏ –¥–∞/–Ω–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∞
def yes_no():
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞", callback_data="address_yes")
    builder.button(text="–ù–µ—Ç", callback_data="address_no")
    builder.adjust(1)
    return builder.as_markup()


yes_no_buttons = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="address_yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="address_no")],
        [InlineKeyboardButton(text="–û–¢–ú–ï–ù–ê", callback_data="back_to_root")]
    ]
)
yes_no_buttons_delete_machine = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="delete_yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="delete_no")]

    ]
)

back_button_to_machines_list = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="m_list")]
    ]
)

back_button_to_root = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_root")]
    ]
)
